#
# Copyright (c) 2015, Prometheus Research, LLC
#

title: REX.ASYNCTASK
tests:
  - rmdir: ./build/coverage
  - mkdir: ./build/coverage
  - coverage: setup.cfg
    auto-data: true

  # Monkeypatching multiprocessing to work with coverage.py
  - py: |
      # monkeypatch multiprocessing
      import multiprocessing
      import multiprocessing.process
      import sys
      if sys.version_info >= (3, 4):
          klass = multiprocessing.process.BaseProcess
      else:
          klass = multiprocessing.Process
      original_bootstrap = klass._bootstrap
      class ProcessWithCoverage(klass):
          def _bootstrap(self, *args, **kwargs):
              from coverage import coverage
              cov = coverage(
                data_suffix=True,
                auto_data=True,
                config_file='setup.cfg',
              )
              cov.start()
              try:
                  return original_bootstrap(self, *args, **kwargs)
              finally:
                  cov.stop()
                  cov.save()
      if sys.version_info >= (3, 4):
          klass._bootstrap = ProcessWithCoverage._bootstrap
      else:
          multiprocessing.Process = ProcessWithCoverage
  # End Monkeypatching

  - sh: pip install --quiet --editable ./demo

  - sh: rex dropdb --quiet rex.asynctask_demo
  - sh: rex deploy --quiet rex.asynctask_demo

  - rmdir: ./filesys_test

  - doctest: README.rst
  - doctest: test/test_*.rst

  - py: |
      # check for redis
      import os
      redishost = os.environ.get('REDISHOST', 'localhost')
      from redis import Redis, RedisError
      client = Redis(host=redishost)
      try:
        client.ping()
      except RedisError:
        __pbbt__['HAS_REDIS'] = False
      else:
        __pbbt__['HAS_REDIS'] = True

  - doctest: test/redis/test_*.rst
    if: HAS_REDIS

  - py: |
      # check for rabbit
      import os
      url = os.environ.get('RABBIT_URL')
      if not url:
        __pbbt__['HAS_RABBIT'] = False
      else:
        import pika
        try:
          conn = pika.BlockingConnection(pika.URLParameters(url))
        except:
          __pbbt__['HAS_RABBIT'] = False
        else:
          __pbbt__['HAS_RABBIT'] = True

  - doctest: test/amqp/test_*.rst
    if: HAS_RABBIT

  - coverage-check: 75.0
  - coverage-report: ./build/coverage

